// // // import React, { useState } from "react";
// // // import moment from "moment";
// // // import "./overview.css";

// // // const PhysioView = () => {
// // //   const [selectedDay, setSelectedDay] = useState(null);
// // //   const [selectedRange, setSelectedRange] = useState(null);
// // //   const [weeklyAvailability, setWeeklyAvailability] = useState([]);
// // //   const [disableTimeSlots, setDisableTimeSlots] = useState(false);

// // //   const timeSlotRanges = [
// // //     { label: "5am to 8am", startTime: "5:00 AM", endTime: "8:00 AM" },
// // //     { label: "8am to 11am", startTime: "8:00 AM", endTime: "11:00 AM" },
// // //     { label: "11am to 2pm", startTime: "11:00 AM", endTime: "2:00 PM" },
// // //     { label: "2pm to 5pm", startTime: "2:00 PM", endTime: "5:00 PM" },
// // //     { label: "5pm to 8pm", startTime: "5:00 PM", endTime: "8:00 PM" },
// // //     { label: "8pm to 11pm", startTime: "8:00 PM", endTime: "11:00 PM" },
// // //   ];

// // //   const handleDaySelection = (day) => {
// // //     setSelectedDay(day);
// // //     setDisableTimeSlots(false);
// // //   };

// // //   const handleRangeSelection = (range) => {
// // //     setSelectedRange(range);
// // //     setDisableTimeSlots(false);
// // //   };

// // //   const handleAvailabilitySelection = (time) => {
// // //     if (!selectedDay || !selectedRange) {
// // //       return;
// // //     }

// // //     setWeeklyAvailability((prevAvailability) => {
// // //       const updatedAvailability = [...prevAvailability];
// // //       const existingSlotIndex = updatedAvailability.findIndex(
// // //         (slot) => slot.day === selectedDay && slot.time === time
// // //       );

// // //       if (existingSlotIndex !== -1) {
// // //         updatedAvailability.splice(existingSlotIndex, 1);
// // //       } else {
// // //         updatedAvailability.push({ day: selectedDay, time });
// // //       }

// // //       return updatedAvailability;
// // //     });

// // //     setDisableTimeSlots(true);
// // //     setTimeout(() => {
// // //       setDisableTimeSlots(false);
// // //     }, 2700000); // 45 minutes in milliseconds
// // //   };

// // //   const generateTimeSlots = (start, end) => {
// // //     const startTime = moment(start, "h:mm A");
// // //     const endTime = moment(end, "h:mm A");
// // //     const timeSlots = [];

// // //     while (startTime.isBefore(endTime)) {
// // //       timeSlots.push(startTime.format("h:mm A"));
// // //       startTime.add(15, "minutes");
// // //     }

// // //     return timeSlots;
// // //   };

// // //   const renderTimeSlots = () => {
// // //     if (!selectedDay || !selectedRange) {
// // //       return (
// // //         <p>Select a day and time slot range to see available time slots.</p>
// // //       );
// // //     }

// // //     return (
// // //       <div className="time-slot-range">
// // //         <div>{selectedRange.label}</div>
// // //         <div className="time-slots-container">
// // //           {generateTimeSlots(
// // //             selectedRange.startTime,
// // //             selectedRange.endTime
// // //           ).map((time) => (
// // //             <div
// // //               key={`${selectedDay}-${time}`}
// // //               className={`time-slot ${
// // //                 weeklyAvailability.some(
// // //                   (slot) => slot.day === selectedDay && slot.time === time
// // //                 )
// // //                   ? "selected"
// // //                   : ""
// // //               }`}
// // //               onClick={() => handleAvailabilitySelection(time)}
// // //               style={{ cursor: disableTimeSlots ? "not-allowed" : "pointer" }}
// // //             >
// // //               {time}
// // //             </div>
// // //           ))}
// // //         </div>
// // //       </div>
// // //     );
// // //   };

// // //   const renderDayButtons = () => {
// // //     const weekDays = [
// // //       "Monday",
// // //       "Tuesday",
// // //       "Wednesday",
// // //       "Thursday",
// // //       "Friday",
// // //       "Saturday",
// // //       "Sunday",
// // //     ];

// // //     return weekDays.map((day) => (
// // //       <button key={day} onClick={() => handleDaySelection(day)}>
// // //         {day}
// // //       </button>
// // //     ));
// // //   };

// // //   const renderRangeButtons = () => {
// // //     return timeSlotRanges.map((range) => (
// // //       <button key={range.label} onClick={() => handleRangeSelection(range)}>
// // //         {range.label}
// // //       </button>
// // //     ));
// // //   };

// // //   return (
// // //     <div>
// // //       <h1>PhysioView</h1>
// // //       <p>Select a day and a time slot range:</p>
// // //       <div className="day-buttons">{renderDayButtons()}</div>
// // //       <div className="range-buttons">{renderRangeButtons()}</div>
// // //       <p>Available time slots:</p>
// // //       <div className="weekly-availability">{renderTimeSlots()}</div>
// // //       <p>Selected slots: {JSON.stringify(weeklyAvailability)}</p>
// // //     </div>
// // //   );
// // // };

// // // export default PhysioView;

// // //partially ok
// // import React, { useState } from "react";
// // // import moment from "moment";
// // // import "./overview.css";

// // // const PhysioView = () => {
// // //   const [selectedDay, setSelectedDay] = useState(null);
// // //   const [selectedRange, setSelectedRange] = useState(null);
// // //   const [weeklyAvailability, setWeeklyAvailability] = useState([]);
// // //   const [disableTimeSlots, setDisableTimeSlots] = useState(false);

// // //   const timeSlotRanges = [
// // //     { label: "5am to 8am", startTime: "5:00 AM", endTime: "8:00 AM" },
// // //     { label: "8am to 11am", startTime: "8:00 AM", endTime: "11:00 AM" },
// // //     { label: "11am to 2pm", startTime: "11:00 AM", endTime: "2:00 PM" },
// // //     { label: "2pm to 5pm", startTime: "2:00 PM", endTime: "5:00 PM" },
// // //     { label: "5pm to 8pm", startTime: "5:00 PM", endTime: "8:00 PM" },
// // //     { label: "8pm to 11pm", startTime: "8:00 PM", endTime: "11:00 PM" },
// // //   ];

// // //   const isTimeSlotIn45MinInterval = (time, selectedTime) => {
// // //     const currentTime = moment(time, "h:mm A");
// // //     const selectedEndTime = moment(selectedTime, "h:mm A").add(45, "minutes");

// // //     return currentTime.isAfter(selectedEndTime);
// // //   };

// // //   const handleDaySelection = (day) => {
// // //     setSelectedDay(day);
// // //     setDisableTimeSlots(false);
// // //   };

// // //   const handleRangeSelection = (range) => {
// // //     setSelectedRange(range);
// // //     setDisableTimeSlots(false);
// // //   };

// // //   const handleAvailabilitySelection = (time) => {
// // //     if (!selectedDay || !selectedRange) {
// // //       return;
// // //     }

// // //     const selectedDateTime = moment(`${selectedDay} ${time}`, "dddd h:mm A");
// // //     const endTime = selectedDateTime.clone().add(45, "minutes");

// // //     const isOverlapping = weeklyAvailability.some((slot) => {
// // //       const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
// // //       return (
// // //         selectedDateTime.isBetween(
// // //           slotStartTime,
// // //           slotStartTime.clone().add(45, "minutes")
// // //         ) ||
// // //         endTime.isBetween(
// // //           slotStartTime,
// // //           slotStartTime.clone().add(45, "minutes")
// // //         )
// // //       );
// // //     });

// // //     setWeeklyAvailability((prevAvailability) => {
// // //       const updatedAvailability = [...prevAvailability];
// // //       const existingSlotIndex = updatedAvailability.findIndex(
// // //         (slot) => slot.day === selectedDay && slot.time === time
// // //       );

// // //       if (existingSlotIndex !== -1) {
// // //         updatedAvailability.splice(existingSlotIndex, 1);
// // //       } else if (!isOverlapping) {
// // //         updatedAvailability.push({ day: selectedDay, time });
// // //       }

// // //       return updatedAvailability;
// // //     });

// // //     setDisableTimeSlots(true);
// // //     setTimeout(() => {
// // //       setDisableTimeSlots(false);
// // //     }, 2700000); // 45 minutes in milliseconds
// // //   };

// // //   const renderTimeSlots = () => {
// // //     if (!selectedDay || !selectedRange) {
// // //       return (
// // //         <p>Select a day and time slot range to see available time slots.</p>
// // //       );
// // //     }

// // //     const timeSlots = generateTimeSlots(
// // //       selectedRange.startTime,
// // //       selectedRange.endTime
// // //     );

// // //     if (!timeSlots.length) {
// // //       return <p>No available time slots for the selected range.</p>;
// // //     }

// // //     return (
// // //       <div className="time-slot-range">
// // //         <div>{selectedRange.label}</div>
// // //         <div className="time-slots-container">
// // //           {timeSlots.map((timeSlot) => (
// // //             <div
// // //               key={`${selectedDay}-${timeSlot.time}`}
// // //               className={`time-slot ${timeSlot.selected ? "selected" : ""}`}
// // //               onClick={() =>
// // //                 timeSlot.available && handleAvailabilitySelection(timeSlot.time)
// // //               }
// // //               style={{
// // //                 cursor:
// // //                   disableTimeSlots || !timeSlot.available
// // //                     ? "not-allowed"
// // //                     : timeSlot.selected
// // //                     ? "pointer"
// // //                     : "pointer",
// // //               }}
// // //             >
// // //               {timeSlot.time}
// // //             </div>
// // //           ))}
// // //         </div>
// // //       </div>
// // //     );
// // //   };

// // //   const generateTimeSlots = (start, end) => {
// // //     const startTime = moment(start, "h:mm A");
// // //     const endTime = moment(end, "h:mm A");
// // //     const timeSlots = [];

// // //     let currentTime = moment(startTime);

// // //     for (let i = 0; i < 18; i++) {
// // //       const formattedTime = currentTime.format("h:mm A");
// // //       const isSelected = weeklyAvailability.some(
// // //         (slot) => slot.day === selectedDay && slot.time === formattedTime
// // //       );

// // //       const isOverlapping = weeklyAvailability.some((slot) => {
// // //         const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
// // //         return (
// // //           currentTime.isBetween(
// // //             slotStartTime,
// // //             slotStartTime.clone().add(45, "minutes")
// // //           ) ||
// // //           endTime.isBetween(
// // //             slotStartTime,
// // //             slotStartTime.clone().add(45, "minutes")
// // //           )
// // //         );
// // //       });

// // //       const isSelectable = !isSelected && !isOverlapping;

// // //       timeSlots.push({
// // //         time: formattedTime,
// // //         available: isSelectable,
// // //         selected: isSelected,
// // //       });

// // //       currentTime.add(15, "minutes");
// // //     }

// // //     console.log("Generated time slots:", timeSlots);
// // //     return timeSlots;
// // //   };

// // //   const renderDayButtons = () => {
// // //     const weekDays = [
// // //       "Monday",
// // //       "Tuesday",
// // //       "Wednesday",
// // //       "Thursday",
// // //       "Friday",
// // //       "Saturday",
// // //       "Sunday",
// // //     ];

// // //     return weekDays.map((day) => (
// // //       <button
// // //         key={day}
// // //         className={selectedDay === day ? "selected" : ""}
// // //         onClick={() => handleDaySelection(day)}
// // //       >
// // //         {day}
// // //       </button>
// // //     ));
// // //   };

// // //   const renderRangeButtons = () => {
// // //     return timeSlotRanges.map((range) => (
// // //       <button
// // //         key={range.label}
// // //         className={
// // //           selectedRange && selectedRange.label === range.label ? "selected" : ""
// // //         }
// // //         onClick={() => handleRangeSelection(range)}
// // //       >
// // //         {range.label}
// // //       </button>
// // //     ));
// // //   };

// // //   return (
// // //     <div className="physio-view">
// // //       <h1>PhysioView</h1>
// // //       <p>Select a day and a time slot range:</p>
// // //       <div className="day-buttons">{renderDayButtons()}</div>
// // //       <div className="range-buttons">{renderRangeButtons()}</div>
// // //       <p>Available time slots:</p>
// // //       <div className="weekly-availability">{renderTimeSlots()}</div>
// // //       <p>Selected slots: {JSON.stringify(weeklyAvailability)}</p>
// // //     </div>
// // //   );
// // // };

// // // export default PhysioView;

// // import React, { useState } from "react";
// // import moment from "moment";
// // import "./overview.css";

// // const PhysioView = () => {
// //   const [selectedDay, setSelectedDay] = useState(null);
// //   const [weeklyAvailability, setWeeklyAvailability] = useState([]);
// //   const [disableTimeSlots, setDisableTimeSlots] = useState(false);

// //   const handleDaySelection = (day) => {
// //     setSelectedDay(day);
// //     setDisableTimeSlots(false);
// //   };

// //   const handleAvailabilitySelection = (time) => {
// //     if (!selectedDay) {
// //       return;
// //     }

// //     const selectedDateTime = moment(`${selectedDay} ${time}`, "dddd h:mm A");
// //     const endTime = selectedDateTime.clone().add(45, "minutes");

// //     const isOverlapping = weeklyAvailability.some((slot) => {
// //       const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
// //       return (
// //         selectedDateTime.isBetween(
// //           slotStartTime,
// //           slotStartTime.clone().add(45, "minutes")
// //         ) ||
// //         endTime.isBetween(
// //           slotStartTime,
// //           slotStartTime.clone().add(45, "minutes")
// //         )
// //       );
// //     });

// //     setWeeklyAvailability((prevAvailability) => {
// //       const updatedAvailability = [...prevAvailability];
// //       const existingSlotIndex = updatedAvailability.findIndex(
// //         (slot) => slot.day === selectedDay && slot.time === time
// //       );

// //       if (existingSlotIndex !== -1) {
// //         updatedAvailability.splice(existingSlotIndex, 1);
// //       } else if (!isOverlapping) {
// //         updatedAvailability.push({ day: selectedDay, time });
// //       }

// //       return updatedAvailability;
// //     });

// //     setDisableTimeSlots(true);
// //     setTimeout(() => {
// //       setDisableTimeSlots(false);
// //     }, 2700000); // 45 minutes in milliseconds
// //   };

// //   const renderTimeSlotsForDay = () => {
// //     if (!selectedDay) {
// //       return <p>Select a day to see available time slots.</p>;
// //     }

// //     const timeSlots = generateTimeSlots("5:00 AM", "11:00 PM");

// //     if (!timeSlots.length) {
// //       return <p>No available time slots for the selected day.</p>;
// //     }

// //     return (
// //       <div className="time-slot-range">
// //         <div>{selectedDay}'s Available Time Slots</div>
// //         <div className="time-slots-container">
// //           {timeSlots.map((timeSlot) => (
// //             <div
// //               key={`${selectedDay}-${timeSlot.time}`}
// //               className={`time-slot ${timeSlot.selected ? "selected" : ""}`}
// //               onClick={() => handleAvailabilitySelection(timeSlot.time)}
// //               style={{
// //                 cursor:
// //                   disableTimeSlots || !timeSlot.available
// //                     ? "not-allowed"
// //                     : timeSlot.selected
// //                     ? "pointer"
// //                     : "pointer",
// //               }}
// //             >
// //               {timeSlot.time}
// //             </div>
// //           ))}
// //         </div>
// //       </div>
// //     );
// //   };

// //   const generateTimeSlots = (start, end) => {
// //     const startTime = moment(start, "h:mm A");
// //     const endTime = moment(end, "h:mm A");
// //     const timeSlots = [];

// //     let currentTime = moment(startTime);

// //     while (currentTime.isBefore(endTime)) {
// //       const formattedTime = currentTime.format("h:mm A");
// //       const isSelected = weeklyAvailability.some(
// //         (slot) => slot.day === selectedDay && slot.time === formattedTime
// //       );

// //       const isOverlapping = weeklyAvailability.some((slot) => {
// //         const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
// //         return (
// //           currentTime.isBetween(
// //             slotStartTime,
// //             slotStartTime.clone().add(45, "minutes")
// //           ) ||
// //           endTime.isBetween(
// //             slotStartTime,
// //             slotStartTime.clone().add(45, "minutes")
// //           )
// //         );
// //       });

// //       const isSelectable = !isOverlapping;

// //       timeSlots.push({
// //         time: formattedTime,
// //         available: isSelectable,
// //         selected: isSelected,
// //       });

// //       currentTime.add(15, "minutes");
// //     }

// //     console.log("Generated time slots:", timeSlots);
// //     return timeSlots;
// //   };

// //   const renderDayButtons = () => {
// //     const weekDays = [
// //       "Monday",
// //       "Tuesday",
// //       "Wednesday",
// //       "Thursday",
// //       "Friday",
// //       "Saturday",
// //       "Sunday",
// //     ];

// //     return weekDays.map((day) => (
// //       <button
// //         key={day}
// //         className={selectedDay === day ? "selected" : ""}
// //         onClick={() => handleDaySelection(day)}
// //       >
// //         {day}
// //       </button>
// //     ));
// //   };

// //   return (
// //     <div className="physio-view">
// //       <h1>PhysioView</h1>
// //       <p>Select a day:</p>
// //       <div className="day-buttons">{renderDayButtons()}</div>
// //       <p>Available time slots:</p>
// //       <div className="weekly-availability">{renderTimeSlotsForDay()}</div>
// //       <p>Selected slots: {JSON.stringify(weeklyAvailability)}</p>
// //     </div>
// //   );
// // };

// // export default PhysioView;
// //  //this was good
import React, { useState } from "react";
import moment from "moment";
import "./overview.css";

const PhysioView = () => {
  const [selectedDay, setSelectedDay] = useState(null);
  const [weeklyAvailability, setWeeklyAvailability] = useState([]);
  const [disableTimeSlots, setDisableTimeSlots] = useState(false);
  const [selectedRange, setSelectedRange] = useState(null);
  const [selectedTimeRange, setSelectedTimeRange] = useState(null);

  const handleDaySelection = (day) => {
    setSelectedDay(day);
    setDisableTimeSlots(false);
  };

  const handleAvailabilitySelection = (time) => {
    if (!selectedDay) {
      return;
    }

    const selectedDateTime = moment(`${selectedDay} ${time}`, "dddd h:mm A");
    const endTime = selectedDateTime.clone().add(45, "minutes");

    const isOverlapping = weeklyAvailability.some((slot) => {
      const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
      return (
        selectedDateTime.isBetween(
          slotStartTime,
          slotStartTime.clone().add(45, "minutes")
        ) ||
        endTime.isBetween(
          slotStartTime,
          slotStartTime.clone().add(45, "minutes")
        )
      );
    });

    setWeeklyAvailability((prevAvailability) => {
      const updatedAvailability = [...prevAvailability];
      const existingSlotIndex = updatedAvailability.findIndex(
        (slot) => slot.day === selectedDay && slot.time === time
      );

      if (existingSlotIndex !== -1) {
        updatedAvailability.splice(existingSlotIndex, 1);
      } else if (!isOverlapping) {
        updatedAvailability.push({ day: selectedDay, time });
      }

      return updatedAvailability;
    });

    setDisableTimeSlots(true);
    setTimeout(() => {
      setDisableTimeSlots(false);
    }, 2700000); // 45 minutes in milliseconds
  };

  const generateTimeSlotsForDay = (day, start, end) => {
    const startTime = moment(start, "h:mm A");
    const endTime = moment(end, "h:mm A");
    const timeSlots = [];

    let currentTime = moment(startTime);

    while (currentTime.isBefore(endTime)) {
      const formattedTime = currentTime.format("h:mm A");
      const isSelected = weeklyAvailability.some(
        (slot) => slot.day === day && slot.time === formattedTime
      );

      const isOverlapping = weeklyAvailability.some((slot) => {
        const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
        return (
          currentTime.isBetween(
            slotStartTime,
            slotStartTime.clone().add(45, "minutes")
          ) ||
          endTime.isBetween(
            slotStartTime,
            slotStartTime.clone().add(45, "minutes")
          )
        );
      });

      const isSelectable = !isOverlapping;

      timeSlots.push({
        time: formattedTime,
        available: isSelectable,
        selected: isSelected,
      });

      currentTime.add(15, "minutes");
    }

    return timeSlots;
  };

  const renderDayButtons = () => {
    const weekDays = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];

    return weekDays.map((day) => (
      <button
        key={day}
        className={selectedDay === day ? "selected" : ""}
        onClick={() => handleDaySelection(day)}
      >
        {day}
      </button>
    ));
  };

  const renderTimeRangeFilters = () => {
    if (!selectedDay) {
      return null;
    }

    const ranges = [
      { start: "5:00 AM", end: "8:00 AM" },
      { start: "8:00 AM", end: "11:00 AM" },
      { start: "11:00 AM", end: "2:00 PM" },
      { start: "2:00 PM", end: "5:00 PM" },
      { start: "5:00 PM", end: "8:00 PM" },
      { start: "8:00 PM", end: "11:00 PM" },
    ];

    return (
      <div className="time-range-filters">
        {ranges.map((range, index) => (
          <button
            key={index}
            onClick={() => filterTimeRange(range.start, range.end)}
            className={
              selectedTimeRange &&
              selectedTimeRange.start === range.start &&
              selectedTimeRange.end === range.end
                ? "selected"
                : ""
            }
          >
            {`${range.start} - ${range.end}`}
          </button>
        ))}
      </div>
    );
  };

  const filterTimeRange = (start, end) => {
    if (!selectedDay) {
      console.error("Select a day first.");
      return;
    }

    setSelectedRange({ start, end });
    setSelectedTimeRange({ start, end });
  };

  const renderTimeSlotsForWeek = () => {
    if (!selectedRange) {
      return <p>Select a range to see available time slots.</p>;
    }

    const totalSelectedSlotsCount = weeklyAvailability.reduce(
      (total, dayAvailability) => {
        const { day } = dayAvailability;
        const timeSlots = generateTimeSlotsForDay(day, selectedRange.start, selectedRange.end);
        const selectedSlotsCount = timeSlots.filter((slot) => slot.selected).length;
        return total + selectedSlotsCount;
      },
      0
    );

    return (
      <div className="time-slot-range">
        <div>Selected Time Slots for the Week</div>
        <p>Number of slots selected for the entire week: {totalSelectedSlotsCount}</p>
      </div>
    );
  };

  const renderTimeSlotsForDay = () => {
    if (!selectedDay || !selectedRange) {
      return <p>Select a day and range to see available time slots.</p>;
    }

    const timeSlots = generateTimeSlotsForDay(selectedDay, selectedRange.start, selectedRange.end);

    if (!timeSlots.length) {
      return <p>No available time slots for the selected day and range.</p>;
    }

    // Count the number of selected slots
    const selectedSlotsCount = timeSlots.filter((slot) => slot.selected).length;

    return (
      <div className="time-slot-range">
        <div>{selectedDay}'s Available Time Slots</div>
        <div className="time-slots-container">
          {timeSlots.map((timeSlot) => (
            <div
              key={`${selectedDay}-${timeSlot.time}`}
              className={`time-slot ${timeSlot.selected ? "selected" : ""}`}
              onClick={() => handleAvailabilitySelection(timeSlot.time)}
              style={{
                backgroundColor: timeSlot.available
                  ? timeSlot.selected
                    ? "green" // Green color for selected time slots
                    : "#ccc" // Grey color for selectable time slots
                  : "white", // Default color for unavailable time slots
                cursor: timeSlot.available
                  ? timeSlot.selected
                    ? "pointer"
                    : "auto"
                  : "not-allowed",
              }}
            >
              {timeSlot.time}
            </div>
          ))}
        </div>
        <p>Number of slots selected for {selectedDay}: {selectedSlotsCount}</p>
      </div>
    );
  };

  return (
    <div className="physio-view">
      <h1>PhysioView</h1>
      <p>Select a day:</p>
      <div className="day-buttons">{renderDayButtons()}</div>
      <p>Select a range:</p>
      {renderTimeRangeFilters()}
      <p>Available time slots:</p>
      <div className="weekly-availability">
        {renderTimeSlotsForWeek()}
        {renderTimeSlotsForDay()}
      </div>
    </div>
  );
};

export default PhysioView;
// this is too good
import React, { useState } from "react";
import moment from "moment";
import { useNavigate } from "react-router-dom";

import "./overview.css";

const PhysioView = ({ physioId }) => {
  const [selectedDay, setSelectedDay] = useState(null);
  const [weeklyAvailability, setWeeklyAvailability] = useState([]);
  const [disableTimeSlots, setDisableTimeSlots] = useState(false);
  const [selectedRange, setSelectedRange] = useState(null);
  const [selectedTimeRange, setSelectedTimeRange] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [confirmationMessage, setConfirmationMessage] = useState(null);

  const navigate = useNavigate(); // Use useNavigate for navigation

  const handleDaySelection = (day) => {
    setSelectedDay(day);
    setDisableTimeSlots(false);
  };

  const handleAvailabilitySelection = (time) => {
    const selectedDateTime = moment(`${selectedDay} ${time}`, "dddd h:mm A");
    const endTime = selectedDateTime.clone().add(45, "minutes");

    const isOverlapping = weeklyAvailability.some((slot) => {
      const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
      return (
        selectedDateTime.isBetween(
          slotStartTime,
          slotStartTime.clone().add(45, "minutes")
        ) ||
        endTime.isBetween(
          slotStartTime,
          slotStartTime.clone().add(45, "minutes")
        )
      );
    });

    setWeeklyAvailability((prevAvailability) => {
      const updatedAvailability = [...prevAvailability];
      const existingSlotIndex = updatedAvailability.findIndex(
        (slot) => slot.day === selectedDay && slot.time === time
      );

      if (existingSlotIndex !== -1) {
        updatedAvailability.splice(existingSlotIndex, 1);
      } else if (!isOverlapping) {
        updatedAvailability.push({ day: selectedDay, time });
      }

      return updatedAvailability;
    });

    setDisableTimeSlots(true);
    setTimeout(() => {
      setDisableTimeSlots(false);
    }, 2700000); // 45 minutes in milliseconds
  };

  const generateTimeSlotsForDay = (day, start, end) => {
    const startTime = moment(start, "h:mm A");
    const endTime = moment(end, "h:mm A");
    const timeSlots = [];

    let currentTime = moment(startTime);

    while (currentTime.isBefore(endTime)) {
      const formattedTime = currentTime.format("h:mm A");
      const isSelected = weeklyAvailability.some(
        (slot) => slot.day === day && slot.time === formattedTime
      );

      const isOverlapping = weeklyAvailability.some((slot) => {
        const slotStartTime = moment(`${slot.day} ${slot.time}`, "dddd h:mm A");
        return (
          currentTime.isBetween(
            slotStartTime,
            slotStartTime.clone().add(45, "minutes")
          ) ||
          endTime.isBetween(
            slotStartTime,
            slotStartTime.clone().add(45, "minutes")
          )
        );
      });

      const isSelectable = !isOverlapping;

      timeSlots.push({
        time: formattedTime,
        available: isSelectable,
        selected: isSelected,
      });

      currentTime.add(15, "minutes");
    }

    return timeSlots;
  };

  const renderDayButtons = () => {
    const weekDays = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];

    return weekDays.map((day) => (
      <button
        key={day}
        className={selectedDay === day ? "selected" : ""}
        onClick={() => handleDaySelection(day)}
      >
        {day}
      </button>
    ));
  };

  const renderTimeRangeFilters = () => {
    if (!selectedDay) {
      return null;
    }

    const ranges = [
      { start: "5:00 AM", end: "8:00 AM" },
      { start: "8:00 AM", end: "11:00 AM" },
      { start: "11:00 AM", end: "2:00 PM" },
      { start: "2:00 PM", end: "5:00 PM" },
      { start: "5:00 PM", end: "8:00 PM" },
      { start: "8:00 PM", end: "11:00 PM" },
    ];

    return (
      <div className="time-range-filters">
        {ranges.map((range, index) => (
          <button
            key={index}
            onClick={() => filterTimeRange(range.start, range.end)}
            className={
              selectedTimeRange &&
              selectedTimeRange.start === range.start &&
              selectedTimeRange.end === range.end
                ? "selected"
                : ""
            }
          >
            {`${range.start} - ${range.end}`}
          </button>
        ))}
      </div>
    );
  };

  const filterTimeRange = (start, end) => {
    if (!selectedDay) {
      console.error("Select a day first.");
      return;
    }

    setSelectedRange({ start, end });
    setSelectedTimeRange({ start, end });
  };

  const renderTimeSlotsForDay = () => {
    if (!selectedDay || !selectedRange) {
      return <p>Select a day and range to see available time slots.</p>;
    }

    const timeSlots = generateTimeSlotsForDay(
      selectedDay,
      selectedRange.start,
      selectedRange.end
    );

    if (!timeSlots.length) {
      return <p>No available time slots for the selected day and range.</p>;
    }

    return (
      <div className="time-slot-range">
        <div>{selectedDay}'s Available Time Slots</div>
        <div className="time-slots-container">
          {timeSlots.map((timeSlot) => (
            <div
              key={`${selectedDay}-${timeSlot.time}`}
              className={`time-slot ${timeSlot.selected ? "selected" : ""}`}
              onClick={() => handleAvailabilitySelection(timeSlot.time)}
              style={{
                backgroundColor: timeSlot.available
                  ? timeSlot.selected
                    ? "green" // Green color for selected time slots
                    : "#ccc" // Grey color for selectable time slots
                  : "white", // Default color for unavailable time slots
                cursor: timeSlot.available
                  ? timeSlot.selected
                    ? "pointer"
                    : "auto"
                  : "not-allowed",
              }}
            >
              {timeSlot.time}
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderTimeSlotsForWeek = () => {
    if (!selectedRange) {
      return <p>Select a range to see available time slots.</p>;
    }

    return (
      <div className="time-slot-range">
        <button onClick={() => setShowModal(true)}>Next</button>
      </div>
    );
  };

  const handleConfirmSlots = async () => {
    try {
      const requestData = {
        physioId: physioId,
        weeklyAvailability: weeklyAvailability,
      };

      const response = await fetch("http://localhost:3001/api/saveSlots", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });

      const responseData = await response.json();

      if (responseData.success) {
        setConfirmationMessage("Slots confirmed and saved successfully!");
      } else {
        console.error("Error saving slots:", responseData.error);
      }
    } catch (error) {
      console.error("Error confirming slots:", error);
    }
  };

  const handleLogout = () => {
    console.log("Logout button clicked");

    // Add your logic for logout, e.g., clearing session, redirecting to login page
    navigate("/login");
  };

  const renderModal = () => {
    if (!showModal) {
      return null;
    }

    const slotsByDayAndTime = weeklyAvailability.reduce(
      (acc, { day, time }) => {
        if (!acc[day]) {
          acc[day] = {};
        }
        acc[day][time] = true;
        return acc;
      },
      {}
    );

    const uniqueTimes = [
      ...new Set(weeklyAvailability.map((slot) => slot.time)),
    ];

    const tableData = (
      <>
        <thead>
          <tr>
            <th>Time</th>
            {uniqueTimes.map((time) => (
              <th key={time}>{time}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {Object.keys(slotsByDayAndTime).map((day) => (
            <tr key={day}>
              <td>{day}</td>
              {uniqueTimes.map((time) => (
                <td key={`${day}-${time}`}>
                  {slotsByDayAndTime[day][time] ? "X" : ""}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </>
    );

    return (
      <div className="modal" style={{ display: showModal ? "block" : "none" }}>
        <div className="modal-content">
          <span className="close" onClick={() => setShowModal(false)}>
            &times;
          </span>
          <h2>Selected Slots</h2>
          {confirmationMessage ? (
            <p>{confirmationMessage}</p>
          ) : (
            <>
              <table>{tableData}</table>
              <button onClick={handleConfirmSlots}>Confirm Slots</button>
            </>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="physio-view">
      <h1>PhysioView</h1>
      <button onClick={handleLogout}>Logout</button>
      <p>Select a day:</p>
      <div className="day-buttons">{renderDayButtons()}</div>
      <p>Select a range:</p>
      {renderTimeRangeFilters()}
      <p>Available time slots:</p>
      <div className="weekly-availability">
        {renderTimeSlotsForDay()}
        {renderTimeSlotsForWeek()}
        {renderModal()}
      </div>
    </div>
  );
};

export default PhysioView;
this is so good final